services:
#   mysql:
#     image: mysql:8.0
#     ports:
#       - 3306:3306

#     environment:
    
#       - MYSQL_DATABASE=poolhub
#       - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}


#     volumes:

#       - poolhubdata:/var/lib/mysql 


  redis:
    image: redis
    expose:
      - "6379"
    volumes:
      - redis-data:/data  # Mount a volume to persist data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 1s
      retries: 5
    command: ["redis-server", "--appendonly", "yes"]  # Enable AOF persistence

 


  django:

    build: .
    command: ["gunicorn", "poolhub.wsgi:application", "-b", "0.0.0.0:8000", '--reload', '--log-level=debug']
    # ./wait-for-it.sh", "mysql:3306", "--",

    # ports:
    #   - "8000:8000"

    volumes:
      - .:/app

    environment:
      - DB_HOST=mysql
      - DB_PASSWORD=${DB_PASSWORD}

      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_REGION_NAME=${AWS_S3_REGION_NAME}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}

      - REMOTE_DB_HOST=${REMOTE_DB_HOST}
      - REMOTE_DB_NAME=${REMOTE_DB_NAME}
      - REMOTE_DB_USER=${REMOTE_DB_USER}
      - REMOTE_DB_PORT=${REMOTE_DB_PORT}
      - REMOTE_DB_PASSWORD=${REMOTE_DB_PASSWORD}

      - SECRET_KEY=${SECRET_KEY}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}



    depends_on:
      # - mysql
      - redis
      - celery

    restart: on-failure

  celery:
    build: .
    command: celery -A poolhub worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_healthy
      
      

  celery-beat:
    build: .
    command: celery -A poolhub beat --loglevel=info
    volumes:
      - .:/app
    depends_on:
      
      redis:
        condition: service_healthy



  daphne:
    build: .
    command: ["daphne", "-u", "/tmp/daphne.sock", "--application-close-timeout", "10", "poolhub.asgi:application"]
    # "--bind", "0.0.0.0", "--port", "8001"
    # ports:
    #   - "8001:8001"
    volumes:
      - .:/app
      - daphne-socket:/tmp
    environment:
      - DB_HOST=mysql

      - REMOTE_DB_HOST=${REMOTE_DB_HOST}
      - REMOTE_DB_NAME=${REMOTE_DB_NAME}
      - REMOTE_DB_USER=${REMOTE_DB_USER}
      - REMOTE_DB_PORT=${REMOTE_DB_PORT}

      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_REGION_NAME=${AWS_S3_REGION_NAME}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}

      - REMOTE_DB_PASSWORD=${REMOTE_DB_PASSWORD}
      - DB_PASSWORD=${DB_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
    depends_on:
      # - mysql
      - redis


  nginx:
    image: nginx:latest
    # command: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; nginx -s reload; sleep 12h & wait $${!}; done;'"


    ports:
      - "80:80"  
      - "443:443"

    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./staticfiles:/app/static
      - ./media:/app/media
      - daphne-socket:/tmp
      - certbot-etc:/etc/letsencrypt  # For SSL certificates
      - certbot-var:/var/lib/certbot   # For Certbot challenges
      - /var/www/certbot:/var/www/certbot 
    depends_on:
      - django
      - daphne
    restart: always


  certbot:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt  # Stores the certificates
      - certbot-var:/var/lib/certbot   # Stores Certbot state
      # - ./certbot/www:/var/www/certbot # Webroot for HTTP challenges
      - /var/www/certbot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; certbot certonly --webroot -w /var/www/certbot --email lgurjidze@gmail.com --agree-tos --no-eff-email -d strikem.site; while :; do sleep 12h; done;'"

    depends_on:
      - nginx
    
    restart: always


  flower:
    image: .
    command: celery -A poolhub flower
    ports:
      - "5555:5555" 
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
    depends_on:
      redis:
        condition: service_healthy
      celery:
        condition: service_started




volumes:
  daphne-socket:
  # poolhubdata:
  certbot-etc:
  certbot-var:
  redis-data: