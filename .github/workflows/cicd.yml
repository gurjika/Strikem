name: Strikem CI/CD Pipeline

on:
  push:
    branches: [ daphne_deploy ]

  pull_request:
    branches: [ daphne_deploy ] 

jobs:
  deploy:
    name: deploy to digitalocean
    runs-on: ubuntu-latest
    # needs: build
    if: github.ref == 'refs/heads/daphne_deploy' && github.event_name == 'push'
    steps: 
      - name: deploy to digitalocean
        uses: appleboy/ssh-action@v1.0.3
        with:
           host: ${{ secrets.SSH_HOST}}
           username: ${{ secrets.SSH_USERNAME}}
           key: ${{ secrets.SSH_PRIVATE_KEY}}

           script: |
              cd PoolHub
              echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
              echo "REMOTE_DB_HOST=${{ secrets.REMOTE_DB_HOST }}" >> .env
              echo "REMOTE_DB_NAME=${{ secrets.REMOTE_DB_NAME }}" >> .env
              echo "REMOTE_DB_USER=${{ secrets.REMOTE_DB_USER }}" >> .env
              echo "REMOTE_DB_PORT=${{ secrets.REMOTE_DB_PORT }}" >> .env
              echo "REMOTE_DB_PASSWORD=${{ secrets.REMOTE_DB_PASSWORD }}" >> .env
              echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
              echo "GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}" >> .env

              echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
              echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}" >> .env
              echo "AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }}" >> .env

              echo "GOOGLE_OAUTH2_CLIENT_ID=${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}" >> .env
              echo "GOOGLE_OAUTH2_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH2_CLIENT_SECRET }}" >> .env
              echo "GOOGLE_OAUTH2_PROJECT_ID=${{ secrets.GOOGLE_OAUTH2_PROJECT_ID }}" >> .env
                      

              docker compose down
              git pull origin daphne_deploy
              docker compose up --build --detach
              docker compose run django python manage.py collectstatic --no-input

  # build:
  #   runs-on: ubuntu-latest

  #   services:
  #     docker:
  #       image: docker:20.10
  #       ports:
  #         - 8000:8000

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v2

  #   - name: Cache Docker layers
  #     uses: actions/cache@v3
  #     with:
  #       path: /tmp/.buildx-cache
  #       key: ${{ runner.os }}-buildx-${{ github.sha }}
  #       restore-keys: |
  #         ${{ runner.os }}-buildx-
  
  #   - name: Build Docker images
  #     run: |
  #       docker compose build

  #   - name: Start services
  #     run: |
  #       docker compose up -d

  #   - name: Wait for MySQL to be ready
  #     run: |
  #       ./wait-for-it.sh mysql:3306 -- echo "MySQL is up"

  #   - name: Run migrations
  #     run: |
  #       docker compose run --rm django python manage.py migrate


  #   - name: Stop and remove services
  #     if: always()
  #     run: |
  #       docker compose down






    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}

      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_S3_REGION_NAME: ${{ secrets.AWS_S3_REGION_NAME }}
      AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}

      REMOTE_DB_PASSWORD: ${{ secrets.REMOTE_DB_PASSWORD }}
      REMOTE_DB_HOST: ${{ secrets.REMOTE_DB_HOST }}
      REMOTE_DB_NAME: ${{ secrets.REMOTE_DB_NAME }}
      REMOTE_DB_USER: ${{ secrets.REMOTE_DB_USER }}
      REMOTE_DB_PORT: ${{ secrets.REMOTE_DB_PORT }}

      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}


      GOOGLE_OAUTH2_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}
      GOOGLE_OAUTH2_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH2_CLIENT_SECRET }}
      GOOGLE_OAUTH2_PROJECT_ID: ${{ secrets.GOOGLE_OAUTH2_PROJECT_ID }}
